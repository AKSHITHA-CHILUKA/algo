"use strict";(self.webpackChunkalgo=self.webpackChunkalgo||[]).push([[7907],{8218:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var i=a(5893),r=a(1151),s=a(2194);const l={id:"variables-in-javascript",sidebar_position:1,title:"Variables in JavaScript",sidebar_label:"Variables in JS"},t=void 0,o={id:"basics/javascript/variables-in-javascript",title:"Variables in JavaScript",description:"---",source:"@site/docs/basics/javascript/ex-1.md",sourceDirName:"basics/javascript",slug:"/basics/javascript/variables-in-javascript",permalink:"/algo/docs/basics/javascript/variables-in-javascript",draft:!1,unlisted:!1,editUrl:"https://github.com/Ajay-Dhangar/algo/tree/main/docs/basics/javascript/ex-1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"variables-in-javascript",sidebar_position:1,title:"Variables in JavaScript",sidebar_label:"Variables in JS"},sidebar:"tutorialSidebar",previous:{title:"JavaScript",permalink:"/algo/docs/category/javascript"},next:{title:"Data Type in JS",permalink:"/algo/docs/basics/javascript/datatype-in-javascript"}},c={},d=[{value:"1. What are Variables?",id:"1-what-are-variables",level:2},{value:"Visualizing Variables",id:"visualizing-variables",level:3},{value:"2. Variable Declaration and Types",id:"2-variable-declaration-and-types",level:2},{value:"Variable Declaration",id:"variable-declaration",level:3},{value:"Variable Assignment and Dynamic Typing",id:"variable-assignment-and-dynamic-typing",level:3},{value:"3. Scope and Hoisting",id:"3-scope-and-hoisting",level:2},{value:"Scope",id:"scope",level:3},{value:"Hoisting",id:"hoisting",level:3},{value:"4. Save Code",id:"4-save-code",level:2},{value:"5. Best Practices",id:"5-best-practices",level:2},{value:"Use <code>const</code> by Default",id:"use-const-by-default",level:3},{value:"Avoid <code>var</code>",id:"avoid-var",level:3}];function h(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(s.Z,{names:"@ajay-dhangar"}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"Hey, everyone! I'm Ajay Dhangar, and today we're delving into a fundamental concept in JavaScript \u2013 Variables. Whether you're a beginner or seeking a refresher, this comprehensive guide will provide you with a solid understanding of JavaScript variables. Let's jump right in!"}),"\n",(0,i.jsx)(n.h2,{id:"1-what-are-variables",children:"1. What are Variables?"}),"\n",(0,i.jsx)(n.p,{children:"In the world of programming, variables act as containers. Think of them like labeled boxes that hold various types of information in your program. These containers allow you to store, retrieve, and manipulate data, providing the foundation for dynamic and interactive code."}),"\n",(0,i.jsx)(n.h3,{id:"visualizing-variables",children:"Visualizing Variables"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TD\r\n  subgraph Variables\r\n    style Variables fill:#f57,stroke:#333,stroke-width:2px, stroke:#262626;\r\n    A(Variable)\r\n  end\r\n\r\n  B["Data Type (e.g., Number, String)"]\r\n  C["Variable Name (e.g., age, name)"]\r\n\r\n  A --\x3e|Stores| B\r\n  A --\x3e|Named| C\r\n\r\n  B --\x3e|Assigned Value| D["Value (e.g., 25, \'John\')"]\r\n  C --\x3e|Used in Code| E["Code (e.g., age = 25; console.log(name);)"]'}),"\n",(0,i.jsx)(n.p,{children:"In JavaScript, we use variables to store and manage data, representing numbers, text, or more complex structures."}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TD\r\n  subgraph Variables\r\n    style Variables fill:#f9f,stroke:#333,stroke-width:2px;\r\n    A[Variable]\r\n  end\r\n\r\n  BoxStyle(e.g., var, let, const)\r\n  style BoxStyle fill:#fff,stroke:#333,stroke-width:2px;\r\n\r\n  B["Number"]\r\n  C["String"]\r\n  D["Boolean"]\r\n  E["Array"]\r\n  F["Object"]\r\n\r\n  A --\x3e|=| B["10"]\r\n  A --\x3e|=| C["\'Hello, World!\'"]\r\n  A --\x3e|=| D["true"]\r\n  A --\x3e|=| E["[1, 2, 3]"]\r\n  A --\x3e|=| F["{ key: \'value\', age: 25 }"]'}),"\n",(0,i.jsxs)(n.admonition,{title:"Definition",type:"tip",children:[(0,i.jsx)(n.p,{children:"In JavaScript, variables are containers that hold information, allowing you to reference and manipulate values within your code. Variables are fundamental to programming, enabling you to work with data dynamically."}),(0,i.jsxs)(n.p,{children:["In programming, variables are used to store and manage data. They act as symbolic names for values. In JavaScript, you can declare variables using the ",(0,i.jsx)(n.code,{children:"var"}),", ",(0,i.jsx)(n.code,{children:"let"}),", or ",(0,i.jsx)(n.code,{children:"const"})," keywords."]}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"var"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Historically used for variable declaration, but it has some scoping issues."}),"\n",(0,i.jsxs)(n.li,{children:["Variables declared with ",(0,i.jsx)(n.code,{children:"var"})," are function-scoped, meaning they are only accessible within the function where they are declared."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"let"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Introduced in ECMAScript 6 (ES6) to address the scoping issues of ",(0,i.jsx)(n.code,{children:"var"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"let"})," allows block-scoping, meaning the variable is limited to the block (enclosed by curly braces) where it is defined."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"const"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Also introduced in ES6, ",(0,i.jsx)(n.code,{children:"const"})," is used to declare constants."]}),"\n",(0,i.jsx)(n.li,{children:"Constants cannot be reassigned after declaration."}),"\n",(0,i.jsx)(n.li,{children:"They are block-scoped like variables declared with let."}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"2-variable-declaration-and-types",children:"2. Variable Declaration and Types"}),"\n",(0,i.jsx)(n.p,{children:"Now, let's explore how to declare variables and the different types available in JavaScript."}),"\n",(0,i.jsx)(n.h3,{id:"variable-declaration",children:"Variable Declaration"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TD\r\n  subgraph Variables\r\n    style Variables fill:#f9f,stroke:#333,stroke-width:2px;\r\n    A[let age = 18;]\r\n  end\r\n\r\n  B["if (age >= 18) {"]\r\n  C["  console.log(\'You are an adult.\');"]\r\n  D["} else {"]\r\n  E["  console.log(\'You are a minor.\');"]\r\n\r\n  A --\x3e|Variable Declaration| B\r\n  B --\x3e|Condition Check| C\r\n  B --\x3e|Alternative Path| D\r\n  D --\x3e|Alternative Output| E'}),"\n",(0,i.jsx)(n.p,{children:"In JavaScript, you can declare variables using 'var,' 'let,' or 'const.' While 'var' has been around for a while, ES6 introduced 'let' and 'const.'"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Comparison of 'var,' 'let,' and 'const':"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Using var (function-scoped)\r\nvar x = 10;\r\n\r\n// Using let (block-scoped, reassignable)\r\nlet y = 'Hello';\r\n\r\n// Using const (block-scoped, not reassignable)\r\nconst pi = 3.14;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"variable-assignment-and-dynamic-typing",children:"Variable Assignment and Dynamic Typing"}),"\n",(0,i.jsx)(n.p,{children:"Once a variable is declared, you can assign values to it. JavaScript's dynamic typing allows the type of a variable to change during runtime."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example of Variable Assignment and Dynamic Typing:"})}),"\n",(0,i.jsx)(n.p,{children:"This flexibility is powerful, but it's crucial to be aware of the data types your variables hold to avoid unexpected behavior."}),"\n",(0,i.jsx)(n.h2,{id:"3-scope-and-hoisting",children:"3. Scope and Hoisting"}),"\n",(0,i.jsx)(n.p,{children:"Understanding the scope of variables is crucial for writing robust and error-free code. JavaScript has function-scoped variables with 'var' and block-scoped variables with 'let' and 'const.'"}),"\n",(0,i.jsx)(n.h3,{id:"scope",children:"Scope"}),"\n",(0,i.jsx)(n.p,{children:"Scope defines the context in which variables are accessible. Let's explore function and block scope."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'function exampleScope() {\r\n  if (true) {\r\n    var localVar = "I\'m accessible inside the function";\r\n    let blockVar = "I\'m accessible only in this block";\r\n  }\r\n  console.log(localVar); // Accessible\r\n  console.log(blockVar); // Error: blockVar is not defined\r\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"hoisting",children:"Hoisting"}),"\n",(0,i.jsx)(n.p,{children:"Variable and function declarations are hoisted to the top of their containing scope during compilation."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'console.log(hoistedVar); // Outputs undefined\r\nvar hoistedVar = "I am hoisted!";\n'})}),"\n",(0,i.jsx)(n.h2,{id:"4-save-code",children:"4. Save Code"}),"\n",(0,i.jsx)(n.p,{children:"To organize and reuse code effectively, consider saving reusable portions as functions or modules. This approach promotes maintainability and helps avoid redundancy."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:'// Example function\r\nfunction greet(name) {\r\n  return `Hello, ${name}!`;\r\n}\r\n\r\n// Using the function\r\nlet message = greet("Algo");\r\nconsole.log(message); // Outputs: Hello, Algo!\n'})}),"\n",(0,i.jsx)(n.h2,{id:"5-best-practices",children:"5. Best Practices"}),"\n",(0,i.jsx)(n.p,{children:"Before we wrap up, let's discuss some best practices for working with variables in JavaScript."}),"\n",(0,i.jsxs)(n.h3,{id:"use-const-by-default",children:["Use ",(0,i.jsx)(n.code,{children:"const"})," by Default"]}),"\n",(0,i.jsxs)(n.p,{children:["In modern JavaScript, it's recommended to use ",(0,i.jsx)(n.code,{children:"const"})," by default. If you know the value will change, then use ",(0,i.jsx)(n.code,{children:"let"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const maxAttempts = 3;\r\nlet currentAttempts = 0;\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"avoid-var",children:["Avoid ",(0,i.jsx)(n.code,{children:"var"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"var"})," keyword is outdated and can lead to unexpected issues. Prefer ",(0,i.jsx)(n.code,{children:"let"})," and ",(0,i.jsx)(n.code,{children:"const"})," for better-scoped variables."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'var oldWay = "I\'m using var.";\r\n\r\nlet modernWay = "I\'m using let.";\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Congratulations! You've now gained a comprehensive understanding of variables in JavaScript."})})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},2194:(e,n,a)=>{a.d(n,{Z:()=>r});a(7294);var i=a(5893);function r(e){let{names:n}=e;const a=n.split(",");return(0,i.jsxs)("div",{className:"tutorial-tag-wrapper",children:[(0,i.jsx)("span",{style:{fontSize:"18px",fontWeight:"500"},children:a.length>1?"Authors: ":"Author: "}),a.map(((e,n)=>(0,i.jsx)("span",{className:"author-tag tag",children:e},n)))]})}},1151:(e,n,a)=>{a.d(n,{Z:()=>t,a:()=>l});var i=a(7294);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);